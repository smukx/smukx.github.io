Simple QI Program 


Sure! Here's an example of a simple Qt program that allows you to input name, roll number, and phone number into a table:

**main.cpp:**
```cpp
#include <QApplication>
#include "mainwindow.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MainWindow w;
    w.show();
    return a.exec();
}
```

**mainwindow.h:**
```cpp
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QTableWidget>

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    void addRecord();

private:
    QTableWidget *tableWidget;
};

#endif // MAINWINDOW_H
```

**mainwindow.cpp:**
```cpp
#include "mainwindow.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLabel>
#include <QLineEdit>
#include <QPushButton>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    QVBoxLayout *mainLayout = new QVBoxLayout(centralWidget);

    // Create table widget
    tableWidget = new QTableWidget(this);
    tableWidget->setColumnCount(3);
    tableWidget->setHorizontalHeaderLabels(QStringList() << "Name" << "Roll No" << "Phone No");
    mainLayout->addWidget(tableWidget);

    // Create input fields
    QHBoxLayout *inputLayout = new QHBoxLayout;
    QLabel *nameLabel = new QLabel("Name:");
    QLineEdit *nameLineEdit = new QLineEdit;
    QLabel *rollNoLabel = new QLabel("Roll No:");
    QLineEdit *rollNoLineEdit = new QLineEdit;
    QLabel *phoneNoLabel = new QLabel("Phone No:");
    QLineEdit *phoneNoLineEdit = new QLineEdit;
    QPushButton *addButton = new QPushButton("Add");

    inputLayout->addWidget(nameLabel);
    inputLayout->addWidget(nameLineEdit);
    inputLayout->addWidget(rollNoLabel);
    inputLayout->addWidget(rollNoLineEdit);
    inputLayout->addWidget(phoneNoLabel);
    inputLayout->addWidget(phoneNoLineEdit);
    inputLayout->addWidget(addButton);

    mainLayout->addLayout(inputLayout);

    // Connect the button to addRecord() slot
    connect(addButton, &QPushButton::clicked, this, &MainWindow::addRecord);
}

MainWindow::~MainWindow()
{
}

void MainWindow::addRecord()
{
    // Retrieve input values
    QString name = tableWidget->item(tableWidget->rowCount() - 1, 0)->text();
    QString rollNo = tableWidget->item(tableWidget->rowCount() - 1, 1)->text();
    QString phoneNo = tableWidget->item(tableWidget->rowCount() - 1, 2)->text();

    // Insert a new row
    int row = tableWidget->rowCount();
    tableWidget->insertRow(row);

    // Insert data into the table
    QTableWidgetItem *nameItem = new QTableWidgetItem(name);
    QTableWidgetItem *rollNoItem = new QTableWidgetItem(rollNo);
    QTableWidgetItem *phoneNoItem = new QTableWidgetItem(phoneNo);

    tableWidget->setItem(row, 0, nameItem);
    tableWidget->setItem(row, 1, rollNoItem);
    tableWidget->setItem(row, 2, phoneNoItem);
}
```

In this example, we create a `MainWindow` class derived from `QMainWindow`. The main window consists of a `QTableWidget` to display the table and input fields for name, roll number, and phone number. The `addRecord()` slot is connected to the "Add" button's `clicked` signal and is responsible for adding the entered data into the table.



Certainly! Here's the UI program for the Qt table application:

**mainwindow.ui:**
```
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="windowTitle">
   <string>Simple Table</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <layout class="QVBoxLayout" name="mainLayout">
    <item>
     <widget class="QTableWidget" name="tableWidget">
      <column>
       <property name="text">
        <string notr="true">Name</string>
       </property>
      </column>
      <column>
       <property name="text">
        <string notr="true">Roll No</string>
       </property>
      </column>
      <column>
       <property name="text">
        <string notr="true">Phone No</string>
       </property>
      </column>
     </widget>
    </item>
    <item>
     <layout class="QHBoxLayout" name="inputLayout">
      <item>
       <widget class="QLabel" name="nameLabel">
        <property name="text">
         <string>Name:</string>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QLineEdit" name="nameLineEdit"/>
      </item>
      <item>
       <widget class="QLabel" name="rollNoLabel">
        <property name="text">
         <string>Roll No:</string>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QLineEdit" name="rollNoLineEdit"/>
      </item>
      <item>
       <widget class="QLabel" name="phoneNoLabel">
        <property name="text">
         <string>Phone No:</string>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QLineEdit" name="phoneNoLineEdit"/>
      </item>
      <item>
       <widget class="QPushButton" name="addButton">
        <property name="text">
         <string>Add</string>
        </property>
       </widget>
      </item>
     </layout>
    </item>
   </layout>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
```

To use this UI file in your Qt application, you need to compile it using the `uic` command-line tool provided by Qt. The `uic` tool generates a C++ header file from the UI file, which you can include in your project.

Here's how you can compile the UI file:

1. Open a terminal or command prompt.

2. Navigate to the directory where the `mainwindow.ui` file is located.

3. Run the `uic` tool to compile the UI file:
```
uic mainwindow.ui -o mainwindow_ui.h
```
This command compiles the `mainwindow.ui` file and generates the `mainwindow_ui.h` header file.

4. Include the generated `mainwindow_ui.h` header file in your `mainwindow.h` file:
```cpp
#include "mainwindow_ui.h"
```

5. Use the UI components in your `MainWindow` class by accessing them through the generated header file.

Please note that the `uic` tool's exact command may vary depending on your operating system and the location of the `uic` executable. Make sure to adjust the command accordingly if needed.